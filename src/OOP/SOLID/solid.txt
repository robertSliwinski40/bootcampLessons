
    SOLID PRINCIPLES

        Single Responsibility               //main,ShapesPrinter, AreaCalculator
    Each class should have only one sole purpose, and not be filled with excessive functionality

        Open Closed                         //AreaCalculator, main,
    Classes should be open for extension, closed for modification
    In other words, you should NOT have to rewrite an existing class for implementing new feature

        Liskov Substitution                 //NoShape
   This means that every subclass or derived class should be substitutable* for their base or parent class (*zastÄ™pcze)

        Interface Segregation               //ThreeDimensionShape, Cube
    Interfaces should not force classes to implement what they can't do.
    Large interfaces should be divided into small ones.

        Dependency Inversion                //ShapePrinter,IAreaCalculator and IAreaCalculator and AreaCalculatorv2
    Components should depend on abstractions, not on concretions.
    I.e., we should really be implementing into interfaces - depends on interface
    //extract method to an interface, so if we are making a change, make new interface
    //like AreaCalculatorv2 with additional function, and you can easily implement it into exists code without modifying it

